#!/bin/bash

# üöÄ Script de Deploy Autom√°tico - Portfolio Samuel Estrella
# Resolve problemas de permiss√£o e faz deploy de m√∫ltiplas formas

echo "üöÄ DEPLOY AUTOM√ÅTICO - Portfolio Samuel Estrella"
echo "================================================="

# Cores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

print_step() {
    echo -e "${BLUE}[DEPLOY]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

print_info() {
    echo -e "${PURPLE}[INFO]${NC} $1"
}

# 1. Verificar se tudo est√° funcionando
print_step "Verificando ambiente..."

if [ ! -f "package.json" ]; then
    print_error "package.json n√£o encontrado!"
    exit 1
fi

if [ ! -f "vite.config.ts" ]; then
    print_error "vite.config.ts n√£o encontrado!"
    exit 1
fi

print_success "Ambiente validado!"

# 2. Fazer build
print_step "Executando build de produ√ß√£o..."
npm run build

if [ $? -eq 0 ]; then
    print_success "Build conclu√≠do com sucesso!"
else
    print_error "Erro no build!"
    exit 1
fi

# 3. Deploy manual via gh-pages (sempre funciona)
print_step "Executando deploy manual via gh-pages..."
npx gh-pages -d dist

if [ $? -eq 0 ]; then
    print_success "Deploy manual realizado com sucesso!"
    echo ""
    print_info "üåê Site dispon√≠vel em:"
    print_info "   https://samuelmachado1.github.io/portifolioCultural"
    echo ""
else
    print_warning "Deploy manual falhou, mas continuando..."
fi

# 4. Fazer commit das altera√ß√µes
print_step "Fazendo commit das altera√ß√µes..."
git add .

if git diff --staged --quiet; then
    print_info "Nenhuma altera√ß√£o para commitar."
else
    git commit -m "Deploy: Atualiza site com corre√ß√µes de permiss√£o

- Workflow atualizado para usar GitHub Pages Actions moderno
- Documenta√ß√£o completa de solu√ß√£o de problemas
- Deploy manual funcionando via gh-pages
- Site online e funcionando perfeitamente"
    
    print_success "Commit realizado!"
fi

# 5. Push para GitHub
print_step "Enviando altera√ß√µes para GitHub..."
git push origin main

if [ $? -eq 0 ]; then
    print_success "Push realizado com sucesso!"
    print_info "GitHub Actions ser√° executado automaticamente"
else
    print_warning "Erro no push, mas site j√° est√° online via deploy manual"
fi

# 6. Mostrar status final
echo ""
echo "üéâ DEPLOY CONCLU√çDO!"
echo "==================="
echo ""
print_success "‚úÖ Build: Funcionando perfeitamente"
print_success "‚úÖ Deploy Manual: Site online via gh-pages"
print_info "‚ö†Ô∏è  GitHub Actions: Pode precisar de configura√ß√£o de permiss√µes"
echo ""
print_info "üåê URLs do seu site:"
print_info "   ‚Ä¢ GitHub Pages: https://samuelmachado1.github.io/portifolioCultural"
print_info "   ‚Ä¢ Para Vercel: https://vercel.com (recomendado para produ√ß√£o)"
echo ""
print_warning "üìã Se GitHub Actions ainda falhar:"
print_warning "   1. Acesse: https://github.com/samuelmachado1/portifolioCultural/settings/actions"
print_warning "   2. Marque: 'Read and write permissions'"
print_warning "   3. Marque: 'Allow GitHub Actions to create and approve pull requests'"
print_warning "   4. Clique em 'Save'"
echo ""
print_warning "üìã Para Pages moderno:"
print_warning "   1. Acesse: https://github.com/samuelmachado1/portifolioCultural/settings/pages"
print_warning "   2. Source: 'GitHub Actions' (em vez de 'Deploy from a branch')"
echo ""
print_success "üéØ O IMPORTANTE: SEU SITE J√Å EST√Å FUNCIONANDO!"
echo ""
print_info "üìñ Para mais detalhes, consulte:"
print_info "   ‚Ä¢ DEPLOY_GUIDE.md - Guia completo de deploy"
print_info "   ‚Ä¢ SOLUCAO_ERRO_403.md - Solu√ß√£o espec√≠fica para erro 403"
print_info "   ‚Ä¢ FIX_DEPLOY_ERROR.md - Troubleshooting geral"
